# import numpy as np
#
# # Sample from a normal distribution using numpy's random number generator
# samples=np.random.normal(size=10000)
#
# # Compute a histogram of the sample
# bins=np.linspace(-5,5,30)
# histogram,bins=np.histogram(samples,bins=bins,density=True)
#
# bin_centers=0.5*(bins[1:]+bins[:-1])
#
# # Compute the PDF on the bin centers from scipy distribution object
# from scipy import stats
# pdf=stats.norm.pdf(bin_centers)
#
# from matplotlib import pyplot as plt
# plt.figure(figsize=(6,4))
# plt.plot(bin_centers,histogram,label="Histogram of samples")
# plt.plot(bin_centers,pdf,label="PDF")
# plt.legend()
# plt.show()


#Precticle 1

import threading
import time
import random

horses = [0, 0, 0, 0, 0]


class Race(threading.Thread):
    win = True

    def __init__(self, num):
        threading.Thread.__init__(self)
        self.num = num
        print("Horse", num, " Ready!!!\n", end="")

    def run(self):
        while (self.__class__.win):
            horses[self.num - 1] += random.randint(1, 20)
            x = "horse[" + str(self.num) + "] at " + str(horses[self.num - 1]) + " meters\n"
            print(x, end="")
            time.sleep(0.2)
            if (horses[self.num - 1] >= 50):
                self.__class__.win = False
                print("Horse-" + str(self.num) + " wins the race\n", end="")


h5 = Race(1)
h1 = Race(2)
h2 = Race(3)
h3 = Race(4)
h4 = Race(5)

h1.start()
h2.start()
h3.start()
h4.start()
h5.start()
#Prac 2
import threading
import time
import logging

logging.basicConfig(level=logging.DEBUG,
                    format='(%(threadName)-9s) %(message)s', )


def locker1(lock):
    logging.debug('Starting')
    while True:
        lock.acquire()
        try:
            logging.debug('Locking')
            time.sleep(1.0)
        finally:
            logging.debug('Not locking')
            lock.release()
        time.sleep(1.0)
    return


def resources(num):
    if (num == 0):
        return str("Travel Agent")
    elif (num == 1):
        return str("Room Accomadation")
    else:
        return str('Food Service')


def worker1(lock):
    logging.debug('Starting')
    num_tries = 0
    num_acquires = 0
    while num_acquires < 3:
        time.sleep(0.5)
        logging.debug('Trying to acquire')
        acquired = lock.acquire(0)
        try:
            num_tries += 1
            x = resources(num_acquires)
            if acquired:
                logging.debug('Try #%d : Acquired ' + x, num_tries)
                num_acquires += 1
            else:
                logging.debug('Try #%d : Not acquired' + x, num_tries)
        finally:
            if acquired:
                lock.release()
    logging.debug('Done after %d tries', num_tries)


if __name__ == '__main__':
    lock = threading.Lock()

    locker = threading.Thread(target=locker1, args=(lock,), name='Locker1')
    locker.setDaemon(True)
    locker.start()

    worker = threading.Thread(target=worker1, args=(lock,), name='Worker1')
    worker.start()

